#avg_corr <- avg_corr + m
#count <- count + 1
all_corrs <- c(all_corrs, as.numeric(corrs$x))
}
#avg_corr <- avg_corr / count
return(all_corrs)
}else{
files <- list.files(path=split_dir, pattern='json',  full.names=TRUE, recursive=TRUE)
for (i in 1:length(files)){
f <- files[i]
if (!grepl('config', f, fixed=TRUE) & !grepl('train',f, fixed=TRUE)){
m <-as.data.frame(fromJSON(file=f)) %>% pivot_longer(cols=everything(), values_to='value', names_to='metric')
if (!exists('om')){
assign('om', m, envir=.GlobalEnv)
}else{
om <- rbind(om,m)
}
}
}
}
}
read_metrics <- function(split_list){
for (i in 1:length(split_list)){
read_split(split_list[i], metric='clf')
}
}
read_corr <- function(split_list){
#avg_corr <- 0
#count <- 0
all_corrs <- c()
split_corrs <- list(c())
for (i in 1:length(split_list)){
out <- read_split(split_list[i])
#avg_corr <- avg_corr + out
#count <- count + 1
all_corrs <- c(all_corrs, out)
split_corrs <- list(c(split_corrs, list(out)))
}
#avg_corr <- avg_corr / count
return(all_corrs)
}
get_subdirs <- function(dir, pattern){
dirs <- list.dirs(path=dir, full.names=TRUE, recursive=FALSE)
dirs <- grep(pattern, dirs, value = TRUE)
return (dirs)
}
get_splits_reg <- function(dirs){
var_list <- c()
for (i in 1:length(dirs)){
r <- dirs[[i]]
feature <- strsplit(r[1], "_")[[1]]
type <- strsplit(feature[length(feature)-3], "/")[[1]]
type <- type[length(type)]
feature <- paste(type, feature[length(feature)-2],feature[length(feature)], sep="_")
splits <- get_subdirs(r, "split*")
assign(feature, splits, envir=.GlobalEnv)
var_list <- c(var_list, feature)
}
return(var_list)
}
get_splits_clf <- function(dirs){
var_list <- c()
for (i in 1:length(dirs)){
r <- dirs[[i]]
feature <- strsplit(r[1], "_")[[1]]
type <- strsplit(feature[length(feature)-4], "/")[[1]]
type <- type[length(type)]
feature <- paste(type, feature[length(feature)-2],feature[length(feature)], sep="_")
splits <- get_subdirs(r, "split*")
assign(feature, splits, envir=.GlobalEnv)
var_list <- c(var_list, feature)
}
return(var_list)
}
get_table_v1 <- function(varlist){
for (i in 1:length(varlist)){
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
out <- read_corr(temp)
tempdf <- data.frame(values=out) %>% mutate(type=type, feat1=feat1, feat2=feat2)
if (!exists('ourvar')){
assign('ourvar', tempdf, envir=.GlobalEnv)
}else{
ourvar <- rbind(ourvar,tempdf)
}
}
return(ourvar)
}
get_table_v2 <- function(varlist){
for (i in 1:length(varlist)){
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
out <- read_metrics(temp) %>% mutate(type=type, feat1=feat1, feat2=feat2)
remove(metrics)
if (!exists('ourvar')){
assign('ourvar', out, envir=.GlobalEnv)
}else{
ourvar <- rbind(ourvar,out)
}
}
return(ourvar)
}
out <- om %>% mutate(type=type, feat1=feat1, feat2=feat2)
remove(om)
rm(metrics)
rm(out)
read_metrics(temp)
View(om)
read_split <- function(split_dir, metric='ridge'){
#avg_corr <- 0
#count <- 0
if (metric == 'ridge'){
files <- list.files(path=split_dir, pattern='npz',  full.names=TRUE, recursive=FALSE)
all_corrs <- c()
for (i in 1:length(files)){
corrs <- data.frame(np$load(files[i])['arr_0']) %>% na.omit()
colnames(corrs) <- c("x")
#m <- mean(as.numeric(corrs$x))
#print(m)
#avg_corr <- avg_corr + m
#count <- count + 1
all_corrs <- c(all_corrs, as.numeric(corrs$x))
}
#avg_corr <- avg_corr / count
return(all_corrs)
}else{
df_list <- list()
files <- list.files(path=split_dir, pattern='json',  full.names=TRUE, recursive=TRUE)
for (i in 1:length(files)){
f <- files[i]
if (!grepl('config', f, fixed=TRUE) & !grepl('train',f, fixed=TRUE)){
m <-as.data.frame(fromJSON(file=f)) %>% pivot_longer(cols=everything(), values_to='value', names_to='metric')
df_list[[i]] <- m
}
}
return (dplyr::bind_rows(df_list))
}
}
read_metrics <- function(split_list){
df_list <- list()
for (i in 1:length(split_list)){
df_list[[i]] <- read_split(split_list[i], metric='clf')
}
return (dplyr::bind_rows(df_list))
}
np <- import("numpy")
read_split <- function(split_dir, metric='ridge'){
#avg_corr <- 0
#count <- 0
if (metric == 'ridge'){
files <- list.files(path=split_dir, pattern='npz',  full.names=TRUE, recursive=FALSE)
all_corrs <- c()
for (i in 1:length(files)){
corrs <- data.frame(np$load(files[i])['arr_0']) %>% na.omit()
colnames(corrs) <- c("x")
#m <- mean(as.numeric(corrs$x))
#print(m)
#avg_corr <- avg_corr + m
#count <- count + 1
all_corrs <- c(all_corrs, as.numeric(corrs$x))
}
#avg_corr <- avg_corr / count
return(all_corrs)
}else{
df_list <- list()
files <- list.files(path=split_dir, pattern='json',  full.names=TRUE, recursive=TRUE)
for (i in 1:length(files)){
f <- files[i]
if (!grepl('config', f, fixed=TRUE) & !grepl('train',f, fixed=TRUE)){
m <-as.data.frame(fromJSON(file=f)) %>% pivot_longer(cols=everything(), values_to='value', names_to='metric')
df_list[[i]] <- m
}
}
return (dplyr::bind_rows(df_list))
}
}
read_metrics <- function(split_list){
df_list <- list()
for (i in 1:length(split_list)){
df_list[[i]] <- read_split(split_list[i], metric='clf')
}
return (dplyr::bind_rows(df_list))
}
read_corr <- function(split_list){
#avg_corr <- 0
#count <- 0
all_corrs <- c()
split_corrs <- list(c())
for (i in 1:length(split_list)){
out <- read_split(split_list[i])
#avg_corr <- avg_corr + out
#count <- count + 1
all_corrs <- c(all_corrs, out)
split_corrs <- list(c(split_corrs, list(out)))
}
#avg_corr <- avg_corr / count
return(all_corrs)
}
get_subdirs <- function(dir, pattern){
dirs <- list.dirs(path=dir, full.names=TRUE, recursive=FALSE)
dirs <- grep(pattern, dirs, value = TRUE)
return (dirs)
}
get_splits_reg <- function(dirs){
var_list <- c()
for (i in 1:length(dirs)){
r <- dirs[[i]]
feature <- strsplit(r[1], "_")[[1]]
type <- strsplit(feature[length(feature)-3], "/")[[1]]
type <- type[length(type)]
feature <- paste(type, feature[length(feature)-2],feature[length(feature)], sep="_")
splits <- get_subdirs(r, "split*")
assign(feature, splits, envir=.GlobalEnv)
var_list <- c(var_list, feature)
}
return(var_list)
}
get_splits_clf <- function(dirs){
var_list <- c()
for (i in 1:length(dirs)){
r <- dirs[[i]]
feature <- strsplit(r[1], "_")[[1]]
type <- strsplit(feature[length(feature)-4], "/")[[1]]
type <- type[length(type)]
feature <- paste(type, feature[length(feature)-2],feature[length(feature)], sep="_")
splits <- get_subdirs(r, "split*")
assign(feature, splits, envir=.GlobalEnv)
var_list <- c(var_list, feature)
}
return(var_list)
}
get_table_v1 <- function(varlist){
df_list <- list()
for (i in 1:length(varlist)){
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
out <- read_corr(temp)
tempdf <- data.frame(values=out) %>% mutate(type=type, feat1=feat1, feat2=feat2)
df_list[[i]] <- tempdf
}
return (dplyr::bind_rows(df_list))
}
get_table_v2 <- function(varlist){
df_list <- list()
for (i in 1:length(varlist)){
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
out <- read_metrics(temp) %>% mutate(type=type, feat1=feat1, feat2=feat2)
df_list[[i]] <- out
}
read_metrics(temp)
}
result_dirs <- get_subdirs('/Users/dwiepert/Documents/Grad_School/Huth/data/data/new_results', '*')
ridge_dirs<-c()
clf_dirs <-c()
for (i in 1:length(result_dirs)){
r <- result_dirs[i]
if (grepl( 'clf', r, fixed = TRUE)){
clf_dirs <- c(clf_dirs, r)
}else{
ridge_dirs <- c(ridge_dirs, r)
}
}
vars <- get_splits_reg(ridge_dirs)
ridge_data <- get_table_v1(vars)
vars2 <- get_splits_clf(clf_dirs)
clf_data <- get_table_v2(vars2)
read_split <- function(split_dir, metric='ridge'){
#avg_corr <- 0
#count <- 0
if (metric == 'ridge'){
files <- list.files(path=split_dir, pattern='npz',  full.names=TRUE, recursive=FALSE)
all_corrs <- c()
for (i in 1:length(files)){
corrs <- data.frame(np$load(files[i])['arr_0']) %>% na.omit()
colnames(corrs) <- c("x")
#m <- mean(as.numeric(corrs$x))
#print(m)
#avg_corr <- avg_corr + m
#count <- count + 1
all_corrs <- c(all_corrs, as.numeric(corrs$x))
}
#avg_corr <- avg_corr / count
return(all_corrs)
}else{
df_list <- list()
files <- list.files(path=split_dir, pattern='json',  full.names=TRUE, recursive=TRUE)
for (i in 1:length(files)){
f <- files[i]
if (!grepl('config', f, fixed=TRUE) & !grepl('eval',f, fixed=TRUE)){
m <-as.data.frame(fromJSON(file=f)) %>% pivot_longer(cols=everything(), values_to='value', names_to='metric')
df_list[[i]] <- m
}
}
return (dplyr::bind_rows(df_list))
}
}
clf_data <- get_table_v2(vars2)
np <- import("numpy")
read_split <- function(split_dir, metric='ridge'){
#avg_corr <- 0
#count <- 0
if (metric == 'ridge'){
files <- list.files(path=split_dir, pattern='npz',  full.names=TRUE, recursive=FALSE)
all_corrs <- c()
for (i in 1:length(files)){
corrs <- data.frame(np$load(files[i])['arr_0']) %>% na.omit()
colnames(corrs) <- c("x")
#m <- mean(as.numeric(corrs$x))
#print(m)
#avg_corr <- avg_corr + m
#count <- count + 1
all_corrs <- c(all_corrs, as.numeric(corrs$x))
}
#avg_corr <- avg_corr / count
return(all_corrs)
}else{
df_list <- list()
files <- list.files(path=split_dir, pattern='json',  full.names=TRUE, recursive=TRUE)
for (i in 1:length(files)){
f <- files[i]
if (!grepl('config', f, fixed=TRUE) & !grepl('eval',f, fixed=TRUE)){
m <-as.data.frame(fromJSON(file=f)) %>% pivot_longer(cols=everything(), values_to='value', names_to='metric')
df_list[[i]] <- m
}
}
return (dplyr::bind_rows(df_list))
}
}
read_metrics <- function(split_list){
df_list <- list()
for (i in 1:length(split_list)){
df_list[[i]] <- read_split(split_list[i], metric='clf')
}
return (dplyr::bind_rows(df_list))
}
read_corr <- function(split_list){
#avg_corr <- 0
#count <- 0
all_corrs <- c()
split_corrs <- list(c())
for (i in 1:length(split_list)){
out <- read_split(split_list[i])
#avg_corr <- avg_corr + out
#count <- count + 1
all_corrs <- c(all_corrs, out)
split_corrs <- list(c(split_corrs, list(out)))
}
#avg_corr <- avg_corr / count
return(all_corrs)
}
get_subdirs <- function(dir, pattern){
dirs <- list.dirs(path=dir, full.names=TRUE, recursive=FALSE)
dirs <- grep(pattern, dirs, value = TRUE)
return (dirs)
}
get_splits_reg <- function(dirs){
var_list <- c()
for (i in 1:length(dirs)){
r <- dirs[[i]]
feature <- strsplit(r[1], "_")[[1]]
type <- strsplit(feature[length(feature)-3], "/")[[1]]
type <- type[length(type)]
feature <- paste(type, feature[length(feature)-2],feature[length(feature)], sep="_")
splits <- get_subdirs(r, "split*")
assign(feature, splits, envir=.GlobalEnv)
var_list <- c(var_list, feature)
}
return(var_list)
}
get_splits_clf <- function(dirs){
var_list <- c()
for (i in 1:length(dirs)){
r <- dirs[[i]]
feature <- strsplit(r[1], "_")[[1]]
type <- strsplit(feature[length(feature)-4], "/")[[1]]
type <- type[length(type)]
feature <- paste(type, feature[length(feature)-2],feature[length(feature)], sep="_")
splits <- get_subdirs(r, "split*")
assign(feature, splits, envir=.GlobalEnv)
var_list <- c(var_list, feature)
}
return(var_list)
}
get_table_v1 <- function(varlist){
df_list <- list()
for (i in 1:length(varlist)){
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
out <- read_corr(temp)
tempdf <- data.frame(values=out) %>% mutate(type=type, feat1=feat1, feat2=feat2)
df_list[[i]] <- tempdf
}
return (dplyr::bind_rows(df_list))
}
get_table_v2 <- function(varlist){
df_list <- list()
for (i in 1:length(varlist)){
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
out <- read_metrics(temp) %>% mutate(type=type, feat1=feat1, feat2=feat2)
df_list[[i]] <- out
}
read_metrics(temp)
}
vars2 <- get_splits_clf(clf_dirs)
result_dirs <- get_subdirs('/Users/dwiepert/Documents/Grad_School/Huth/data/data/new_results', '*')
ridge_dirs<-c()
clf_dirs <-c()
for (i in 1:length(result_dirs)){
r <- result_dirs[i]
if (grepl( 'clf', r, fixed = TRUE)){
clf_dirs <- c(clf_dirs, r)
}else{
ridge_dirs <- c(ridge_dirs, r)
}
}
vars <- get_splits_reg(ridge_dirs)
ridge_data <- get_table_v1(vars)
vars2 <- get_splits_clf(clf_dirs)
clf_data <- get_table_v2(vars2)
try <- clf_dirs[1]
read_split(try, metric='clf')
read_split(clf_dirs[2], metric='clf')
read_split(clf_dirs[3], metric='clf')
read_split(clf_dirs[4], metric='clf')
read_split(clf_dirs[5], metric='clf')
read_split(clf_dirs[6], metric='clf')
read_split(clf_dirs[7], metric='clf')
read_split(clf_dirs[8], metric='clf')
read_split(clf_dirs[9], metric='clf')
read_split(clf_dirs[10], metric='clf')
varlist <- vars2
dirs <- c()
for (i in 1:length(varlist)){
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
dirs <- c(dirs, temp)
for (i in 1:length(varlist)){
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
dirs <- c(dirs, temp)
#out <- read_metrics(temp) %>% mutate(type=type, feat1=feat1, feat2=feat2)
#df_list[[i]] <- out
}
dirs <- c()
for (i in 1:length(varlist)){
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
dirs <- c(dirs, temp)
#out <- read_metrics(temp) %>% mutate(type=type, feat1=feat1, feat2=feat2)
#df_list[[i]] <- out
}
dirs <- c()
for (i in 1:length(varlist)){
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
dirs <- append(dirs, temp)
#out <- read_metrics(temp) %>% mutate(type=type, feat1=feat1, feat2=feat2)
#df_list[[i]] <- out
}
i <- 1
v <- varlist[i]
splitv <- strsplit(v, "_")[[1]]
type <- splitv[1]
feat1 <- splitv[2]
feat2 <- splitv[3]
temp <- get(v)
d
exit
./asd
v <- varlist[i]
